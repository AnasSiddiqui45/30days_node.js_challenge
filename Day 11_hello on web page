# create a file named as index.js

const express = require("express");
const authenticationMiddleware = require("./authenticationMiddleware");

const app = express();

// Middleware
app.use(express.json());

// Routes
app.get("/", (req, res) => {
  res.send("Hi welcome to my webpage");
});

// Protected route
app.get("/protected", authenticationMiddleware, (req, res) => {
  res.send("Protected Route");
});

// Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
  // console.log(`Server is running on port ${PORT}`);
});

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# create a another file named as authenticationMiddleware.js

const jwtUtils = require('./jwtUtils');

/**
 * Authentication middleware for Express
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
function authenticationMiddleware(req, res, next) {
  const token = req.headers.authorization;
  if (!token) {
    return res.status(401).json({ message: 'No token provided' });
  }

  try {
    const decoded = jwtUtils.verifyToken(token);
    req.user = decoded.user;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Invalid token' });
  }
}

module.exports = authenticationMiddleware;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# create a another file named as jwtUtils.js

const jwt = require('jsonwebtoken');

const secretKey = 'your security code here';

/**
 * Generate JWT token
 * @param {Object} payload - Payload to be included in the token
 * @returns {string} JWT token
 */
function generateToken(payload) {
  return jwt.sign(payload, secretKey, { expiresIn: '1h' });
}

/**
 * Verify JWT token
 * @param {string} token - JWT token to verify
 * @returns {Object} Decoded payload if token is valid
 * @throws {Error} If token is invalid
 */
function verifyToken(token) {
  return jwt.verify(token, secretKey);
}

module.exports = { generateToken, verifyToken };

